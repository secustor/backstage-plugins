//

// ******************************************************************
// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *
// ******************************************************************
import { DiscoveryApi } from '../types/discovery';
import { FetchApi } from '../types/fetch';
import crossFetch from 'cross-fetch';
import { pluginId } from '../pluginId';
import * as parser from 'uri-template';

import { Dependency } from '../models/Dependency.model';
import { ReportsDelete200Response } from '../models/ReportsDelete200Response.model';
import { ReportsGet200ResponseInner } from '../models/ReportsGet200ResponseInner.model';
import { RunsPost202Response } from '../models/RunsPost202Response.model';
import { RunsPostRequest } from '../models/RunsPostRequest.model';

/**
 * Wraps the Response type to convey a type on the json call.
 *
 * @public
 */
export type TypedResponse<T> = Omit<Response, 'json'> & {
  json: () => Promise<T>;
};

/**
 * Options you can pass into a request for additional information.
 *
 * @public
 */
export interface RequestOptions {
  token?: string;
}

/**
 * no description
 */
export class DefaultApiClient {
  private readonly discoveryApi: DiscoveryApi;
  private readonly fetchApi: FetchApi;

  constructor(options: {
    discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };
    fetchApi?: { fetch: typeof fetch };
  }) {
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi || { fetch: crossFetch };
  }

  /**
   * Get dependencies for host
   * @param datasource filter by datasource
   * @param depName filter by dependency name
   * @param depType filter by dependency type
   * @param host
   * @param latestOnly include only dependencies which have been found in the last extraction
   * @param limit limit the number of dependencies returned
   * @param manager filter by manager
   * @param packageFile filter by package file
   * @param repository
   */
  public async dependenciesGet(
    // @ts-ignore
    request: {
      query: {
        datasource?: Array<string>;
        depName?: Array<string>;
        depType?: Array<string>;
        host?: Array<string>;
        latestOnly?: boolean;
        limit?: number;
        manager?: Array<string>;
        packageFile?: Array<string>;
        repository?: Array<string>;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<Array<Dependency>>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/dependencies{?datasource*,depName*,depType*,host*,latestOnly,limit,manager*,packageFile*,repository*}`;

    const uri = parser.parse(uriTemplate).expand({
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Get health status of the plugin
   */
  public async healthGet(
    // @ts-ignore
    request: {},
    options?: RequestOptions,
  ): Promise<TypedResponse<string>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/health`;

    const uri = parser.parse(uriTemplate).expand({});

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Delete reports based on parameters
   * @param keepLatest how many reports of all targets should be kept
   */
  public async reportsDelete(
    // @ts-ignore
    request: {
      query: {
        keepLatest?: number;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<ReportsDelete200Response>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports{?keepLatest}`;

    const uri = parser.parse(uriTemplate).expand({
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'DELETE',
    });
  }

  /**
   * Get all reports
   */
  public async reportsGet(
    // @ts-ignore
    request: {},
    options?: RequestOptions,
  ): Promise<TypedResponse<Array<ReportsGet200ResponseInner>>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports`;

    const uri = parser.parse(uriTemplate).expand({});

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Delete reports based on parameters
   * @param keepLatest how many reports of all targets should be kept
   */
  public async reportsHostDelete(
    // @ts-ignore
    request: {
      query: {
        keepLatest?: number;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<ReportsDelete200Response>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports/{host}{?keepLatest}`;

    const uri = parser.parse(uriTemplate).expand({
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'DELETE',
    });
  }

  /**
   * Get reports for host
   * @param host
   */
  public async reportsHostGet(
    // @ts-ignore
    request: {
      path: {
        host: string;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<Array<ReportsGet200ResponseInner>>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports/{host}`;

    const uri = parser.parse(uriTemplate).expand({
      host: request.path.host,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Delete reports based on parameters
   * @param keepLatest how many reports of all targets should be kept
   */
  public async reportsHostRepositoryDelete(
    // @ts-ignore
    request: {
      query: {
        keepLatest?: number;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<ReportsDelete200Response>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports/{host}/{repository}{?keepLatest}`;

    const uri = parser.parse(uriTemplate).expand({
      ...request.query,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'DELETE',
    });
  }

  /**
   * Get reports for repository
   * @param host
   * @param repository
   */
  public async reportsHostRepositoryGet(
    // @ts-ignore
    request: {
      path: {
        host: string;
        repository: string;
      };
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<Array<ReportsGet200ResponseInner>>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/reports/{host}/{repository}`;

    const uri = parser.parse(uriTemplate).expand({
      host: request.path.host,
      repository: request.path.repository,
    });

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'GET',
    });
  }

  /**
   * Start or get Renovate runs
   * @param runsPostRequest
   */
  public async runsPost(
    // @ts-ignore
    request: {
      body: RunsPostRequest;
    },
    options?: RequestOptions,
  ): Promise<TypedResponse<RunsPost202Response>> {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);

    const uriTemplate = `/runs`;

    const uri = parser.parse(uriTemplate).expand({});

    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        'Content-Type': 'application/json',
        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),
      },
      method: 'POST',
      body: JSON.stringify(request.body),
    });
  }
}
